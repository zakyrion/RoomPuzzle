// METADATA file_path: Assets/Scripts/Features/Player/View/PlayerView.cs
using System;
using RoomPuzzle.Features.Pickups.View;
using RoomPuzzle.Features.Player.Model;
using UnityEngine;
using Zenject;

namespace RoomPuzzle.Features.Player.View
{
    [RequireComponent(typeof(Rigidbody), typeof(CapsuleCollider))]
    public class PlayerView : MonoBehaviour, IPlayerView
    {
        public event Action<PickupView> OnPickupCollected;

        [Header("Debug Info")]
        [SerializeField] private bool debugIsGrounded;

        [Header("Collision Settings")]
        [SerializeField] private LayerMask _platformLayerMask;
        [SerializeField] private string _oneWayPlatformTag = "OneWayPlatform";
        [SerializeField] private string _pickupTag = "Pickup";
        [SerializeField] private float _groundCheckDistance = 0.2f;
        private CapsuleCollider _collider;
        private Vector3 _moveDirection;
        private Collider[] _oneWayPlatforms;

        private IPlayerModel _playerModel;
        private Rigidbody _rigidbody;
        public bool IsGrounded { get; private set; }

        public Transform Transform => transform;

        private void Awake()
        {
            _rigidbody = GetComponent<Rigidbody>();
            _collider = GetComponent<CapsuleCollider>();
            _rigidbody.constraints = RigidbodyConstraints.FreezeRotation;
        }

        private void Start()
        {
            var platformObjects = GameObject.FindGameObjectsWithTag(_oneWayPlatformTag);
            _oneWayPlatforms = new Collider[platformObjects.Length];
            for (var i = 0; i < platformObjects.Length; i++)
                _oneWayPlatforms[i] = platformObjects[i].GetComponent<Collider>();
        }

        private void FixedUpdate()
        {
            var targetSpeed = _moveDirection.x * _playerModel.MoveSpeed;
            var speedDifference = targetSpeed - _rigidbody.linearVelocity.x;
            var accelerationRate = Mathf.Abs(targetSpeed) > 0.01f ? _playerModel.Acceleration : _playerModel.Deceleration;
            var movementForce = speedDifference * accelerationRate;
            _rigidbody.AddForce(movementForce * Vector2.right, ForceMode.Force);

            CheckIfGrounded();
            HandleOneWayPlatforms();
        }

        private void OnTriggerEnter(Collider other)
        {
            if (other.CompareTag(_pickupTag))
            {
                var pickup = other.GetComponent<PickupView>();
                if (pickup != null)
                    OnPickupCollected?.Invoke(pickup);
            }
        }

        public void SetMoveDirection(Vector3 direction)
        {
            _moveDirection = direction;
        }

        public void Jump(float force)
        {
            // Reset Y velocity only
            _rigidbody.linearVelocity = new Vector3(_rigidbody.linearVelocity.x, 0, _rigidbody.linearVelocity.z);
            _rigidbody.AddForce(Vector3.up * force, ForceMode.Impulse);
        }

        [Inject]
        public void Construct(IPlayerModel playerModel)
        {
            _playerModel = playerModel;
        }

        private void CheckIfGrounded()
        {
            var radius = _collider.radius * 0.9f;
            var origin = transform.position + new Vector3(0, _collider.radius, 0);
            IsGrounded = Physics.SphereCast(origin, radius, Vector3.down, out _, _groundCheckDistance, _platformLayerMask);
            debugIsGrounded = IsGrounded;
        }

        private void HandleOneWayPlatforms()
        {
            if (_oneWayPlatforms == null)
                return;

            foreach (var platformCollider in _oneWayPlatforms)
            {
                if (platformCollider == null)
                    continue;
                platformCollider.enabled = _rigidbody.linearVelocity.y < 0.01f;
            }
        }
    }
}
